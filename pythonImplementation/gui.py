#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Mon Jul  4 22:25:57 2022@author: thorknudsen"""import tkinter as tkimport numpy as npfrom tkmacosx import Button#import PIL.Image#import PIL.ImageTkclass GUI:	def __init__(self, character, serialCommunication):		self.modifier = 0		self.roll = 0		self.window = tk.Tk()		self.window.attributes('-fullscreen', True)		self.window.configure(bg="black")		self.addIsConnectedLabel(serialCommunication)		self.addName(character.name)		self.addAbilityButtons(character)		self.addSavingThrowButtons(character.savingThrowMultipliers)		self.addInitiativeButton(character.statsModifiers[1])		#self.addWeaponButtons(character.equippedWeapons, character.statsModifiers[:2])		self.addWeaponButtons(character)		self.addSpellButtons(character)		#self.image = tk.PhotoImage(file="advantage.gif")		#b = Button(self.window, text="Hello, world", image=self.image, compound="left", bg="#ff0000")		#b.pack(side="top")		#self.buttonQuit = Button(self.window, text="Quit", command=self.window.destroy).pack() # self.window.destroy		#self.window.mainloop()	def addName(self, name):			self.label1 = tk.Label(self.window, text=name, font=('Times New Roman bold', 50), bg="black", fg="white")		self.label1.pack(padx=10, pady=20)		self.text2 = tk.StringVar()		self.text2.set("")		self.label2 = tk.Label(self.window, textvariable=self.text2, font=('Times New Roman bold', 60), bg="black", fg="white")		self.label2.pack(side = "bottom", pady=10)		self.text3 = tk.StringVar()		self.text3.set("Awaiting selection")		self.label3 = tk.Label(self.window, textvariable=self.text3, font=('Times New Roman bold', 60), bg="black", fg="white")		self.label3.pack(side = "bottom")	def addAbilityButtons(self, character):		buttonHeight = 60#3		buttonWidth = 160#15		xs = np.arange(0, 3) * 180 + 20		ys = np.arange(1, 7) * 100 + 50		colorScheme = ["#994236", "#495b4a", "#cd893b", "#3d5a80", "#adadad", "#98788b"]		font = ('Times New Roman bold', 22)		imageAdvantage = tk.PhotoImage(file="advantage.gif")		imageDisadvantage = tk.PhotoImage(file="disadvantage.gif")		button1 = Button(self.window, text="Acrobatics", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[1], font=font, fg="white", command=lambda:self.abilityActivationFunction(0, character.abilityModifiers))		button1.place(x=xs[0], y=ys[0])		button2 = Button(self.window, text="  Animal\nHandling", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[4], font=font, fg="white", command=lambda:self.abilityActivationFunction(1, character.abilityModifiers))		button2.place(x=xs[0], y=ys[1])		button3 = Button(self.window, text="Arcana", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[3], font=font, fg="white", command=lambda:self.abilityActivationFunction(2, character.abilityModifiers))		button3.place(x=xs[0], y=ys[2])		button4 = Button(self.window, text="Athletics", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[0], font=font, fg="white", command=lambda:self.abilityActivationFunction(3, character.abilityModifiers))		button4.place(x=xs[0], y=ys[3])		button5 = Button(self.window, text="Deception", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[5], font=font, fg="white", command=lambda:self.abilityActivationFunction(4, character.abilityModifiers))		button5.place(x=xs[0], y=ys[4])		button6 = Button(self.window, text="History", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[3], font=font, fg="white", command=lambda:self.abilityActivationFunction(5, character.abilityModifiers))		button6.place(x=xs[0], y=ys[5])		button7 = Button(self.window, text="Insight", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[4], font=font, fg="white", command=lambda:self.abilityActivationFunction(6, character.abilityModifiers))		button7.place(x=xs[1], y=ys[0])		button8 = Button(self.window, text="Intimidation", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[5], font=font, fg="white", command=lambda:self.abilityActivationFunction(7, character.abilityModifiers))		button8.place(x=xs[1], y=ys[1])		button9 = Button(self.window, text="Investigation", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[3], font=font, fg="white", command=lambda:self.abilityActivationFunction(8, character.abilityModifiers))		button9.place(x=xs[1], y=ys[2])		button10 = Button(self.window, text="Medicine", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[4], font=font, fg="white", command=lambda:self.abilityActivationFunction(9, character.abilityModifiers))		button10.place(x=xs[1], y=ys[3])		button11 = Button(self.window, text="Nature", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[3], font=font, fg="white", command=lambda:self.abilityActivationFunction(10, character.abilityModifiers))		button11.place(x=xs[1], y=ys[4])		button12 = Button(self.window, text="Perception", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[4], font=font, fg="white", command=lambda:self.abilityActivationFunction(11, character.abilityModifiers))		button12.place(x=xs[1], y=ys[5])		button13 = Button(self.window, text="Performance", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[5], font=font, fg="white", command=lambda:self.abilityActivationFunction(12, character.abilityModifiers))		button13.place(x=xs[2], y=ys[0])		button14 = Button(self.window, text="Persuasion", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[5], font=font, fg="white", command=lambda:self.abilityActivationFunction(13, character.abilityModifiers))		button14.place(x=xs[2], y=ys[1])		button15 = Button(self.window, text="Religion", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[3], font=font, fg="white", command=lambda:self.abilityActivationFunction(14, character.abilityModifiers))		button15.place(x=xs[2], y=ys[2])		button16 = Button(self.window, text=" Sleight\nof Hand", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[1], font=font, fg="white", command=lambda:self.abilityActivationFunction(15, character.abilityModifiers))		button16.place(x=xs[2], y=ys[3])				if character.stealthCheckAdvantage == 1:			button17 = Button(self.window, text="Stealth", image=imageAdvantage, compound="right", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[1], font=font, fg="white", command=lambda:self.abilityActivationFunction(16, character.abilityModifiers))		elif character.stealthCheckAdvantage == 2:			button17 = Button(self.window, text="Stealth", image=imageDisadvantage, compound="right", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[1], font=font, fg="white", command=lambda:self.abilityActivationFunction(16, character.abilityModifiers))		else:			button17 = Button(self.window, text="Stealth", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[1], font=font, fg="white", command=lambda:self.abilityActivationFunction(16, character.abilityModifiers))		button17.place(x=xs[2], y=ys[4])				button18 = Button(self.window, text="Survival", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[5], font=font, fg="white", command=lambda:self.abilityActivationFunction(17, character.abilityModifiers))		button18.place(x=xs[2], y=ys[5])	def addSavingThrowButtons(self, savingThrowMultipliers):		buttonHeight = 60#3		buttonWidth = 160#15		x = (self.window.winfo_screenwidth() - buttonWidth) / 2		ys = np.arange(1, 7) * 100 + 50		colorScheme = ["#994236", "#495b4a", "#cd893b", "#3d5a80", "#adadad", "#98788b"]		font = ('Times New Roman bold', 22)		button1 = Button(self.window, text="STR", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[0], font=font, fg="white", command=lambda:self.savingThrowActivationFunction(0, savingThrowMultipliers))		button1.place(x=x, y=ys[0])		button2 = Button(self.window, text="DEX", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[1], font=font, fg="white", command=lambda:self.savingThrowActivationFunction(1, savingThrowMultipliers))		button2.place(x=x, y=ys[1])		button3 = Button(self.window, text="CON", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[2], font=font, fg="white", command=lambda:self.savingThrowActivationFunction(2, savingThrowMultipliers))		button3.place(x=x, y=ys[2])		button4 = Button(self.window, text="INT", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[3], font=font, fg="white", command=lambda:self.savingThrowActivationFunction(3, savingThrowMultipliers))		button4.place(x=x, y=ys[3])		button5 = Button(self.window, text="WIS", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[4], font=font, fg="white", command=lambda:self.savingThrowActivationFunction(4, savingThrowMultipliers))		button5.place(x=x, y=ys[4])		button6 = Button(self.window, text="CHA", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg=colorScheme[5], font=font, fg="white", command=lambda:self.savingThrowActivationFunction(5, savingThrowMultipliers))		button6.place(x=x, y=ys[5])	def addWeaponButtons(self, character):		buttons = []		buttonHeight = 60#3		buttonWidth = 160#15		font = ('Times New Roman bold', 22)		xs = np.tile((self.window.winfo_screenwidth() - buttonWidth) - np.arange(0, 3)[::-1] * 180 - 20, 6)		ys = np.repeat(np.arange(1, 7) * 100 + 50, 3)		for idx, weapon in enumerate(character.equippedWeapons):			button = Button(self.window, text=weapon.name, height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg="#ff0000", font=font, fg="white", command=lambda:self.weaponActivationFunction(weapon, character))			#button.place(x=xs[idx%3], y=ys[int(np.floor(idx/3))])			button.place(x=xs[idx], y=ys[idx])			buttons.append(button)	def addSpellButtons(self, character):		buttons = []		buttonHeight = 60#3		buttonWidth = 160#15		font = ('Times New Roman bold', 22)		xs = np.tile((self.window.winfo_screenwidth() - buttonWidth) - np.arange(0, 3)[::-1] * 180 - 20, 6)		ys = np.repeat(np.arange(1, 7) * 100 + 50, 3)		for idx, spell in enumerate(character.spells):			button = Button(self.window, text=spell.name, height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg="#0000ff", font=font, fg="white", command=lambda:self.spellActivationFunction(spell, character))			button.place(x=xs[idx + len(character.equippedWeapons)], y=ys[idx + len(character.equippedWeapons)])			buttons.append(button)	def addInitiativeButton(self, modifierValue):		buttonHeight = 60#3		buttonWidth = 160#15		font = ('Times New Roman bold', 22)		button = Button(self.window, text="Initiative", height=buttonHeight, width=buttonWidth, highlightbackground='#000000', bg="#ff0000", font=font, fg="white", command=lambda:self.initiativeActivationFunction(modifierValue))		button.place(x=20, y=800)			def abilityActivationFunction(self, abilityIdx, abilityModifiers):		#self.isAbilityActive = True		self.modifier = abilityModifiers[abilityIdx]		self.changeText2()		self.changeText3Ability(abilityIdx)	def savingThrowActivationFunction(self, savingThrowIdx, savingThrowMultipliers):		self.modifier = savingThrowMultipliers[savingThrowIdx]		self.changeText2()		self.changeText3SavingThrow(savingThrowIdx)	def initiativeActivationFunction(self, modifierValue):		self.modifier = modifierValue		self.changeText2()		self.text3.set("Initiative")	def weaponActivationFunction(self, weapon, character):		modifier = 0		if "Finesse" in weapon.properties:			modifier += max(character.statsModifiers[:2])		else:			modifier += character.statsModifiers[0]		if weapon.isProficient:			modifier += character.proficiencyBonus		self.modifier = modifier		self.changeText2()		self.text3.set(weapon.name)	def spellActivationFunction(self, spell, character):		if (character.Class == "Artificer") or (character.Class == "Fighter") or (character.Class == "Rogue") or (character.Class == "Wizard"):			self.modifier = character.statsModifiers[3]		elif (character.Class == "Cleric") or (character.Class == "Druid") or (character.Class == "Monk") or (character.Class == "Ranger"):			self.modifier = character.statsModifiers[4]		elif (character.Class == "Bard") or (character.Class == "Paladin") or (character.Class == "Sorcerer") or (character.Class == "Warlock"):			self.modifier = character.statsModifiers[5]		self.modifier += character.proficiencyBonus				self.changeText2()		self.text3.set(spell.name)	def changeText2(self):		if self.modifier >= 0:			self.text2.set("{} + {} = {}".format(self.roll, self.modifier, self.roll + self.modifier))		else: 			self.text2.set("{} - {} = {}".format(self.roll, abs(self.modifier), self.roll + self.modifier))	def changeText3Ability(self, idx):		abilities = ["Acrobatics", "Animal Handling", "Arcana", "Athletics", "Deception", "History", 					 "Insight", "Intimidation", "Investigation", "Medicine", "Nature", "Perception", 					 "Performance", "Persuasion", "Religion", "Sleight of Hand", "Stealth", "Survival"]		self.text3.set(abilities[idx])	def changeText3SavingThrow(self, savingThrowIdx):		savingThrows = ["STR", "DEX", "CON", "INT", "WIS", "CHA"]		self.text3.set(savingThrows[savingThrowIdx])	def setRoll(self, roll):		self.roll = roll		self.changeText2()	def addIsConnectedLabel(self, serialCommunication):		label = tk.Label(self.window, text="Arduino\nnot connected!", font=('Times New Roman bold', 20), bg="black", fg="red")		label.place(x=20, y=20)